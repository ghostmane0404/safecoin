name: CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ '*' ]

jobs:
  detekt:
    name: Detekt
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for dev
        run: |
          mkdir -p app/src/dev
          echo '${{ secrets.GOOGLE_SERVICES_JSON_DEV }}' > app/src/dev/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Detekt
        run: ./gradlew detekt

      - name: Upload Detekt Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: detekt-reports-${{ github.run_number }}
          path: |
            **/build/reports/detekt/

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for dev
        run: |
          mkdir -p app/src/dev
          echo '${{ secrets.GOOGLE_SERVICES_JSON_DEV }}' > app/src/dev/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Lint for Dev Debug
        run: ./gradlew lintDevDebug

      - name: Upload Lint Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-reports-dev-debug-${{ github.run_number }}
          path: |
            **/build/reports/lint-results*.html
            **/build/reports/lint-results*.xml
            **/build/reports/lint-results*.txt

  test:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for dev
        run: |
          mkdir -p app/src/dev
          echo '${{ secrets.GOOGLE_SERVICES_JSON_DEV }}' > app/src/dev/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run Unit Tests for Dev Debug
        run: ./gradlew testDevDebugUnitTest

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports-dev-debug-${{ github.run_number }}
          path: |
            **/build/reports/tests/
            **/build/test-results/

  build-dev:
    name: Build Dev APK
    runs-on: ubuntu-latest
    needs: [detekt, lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for dev
        run: |
          mkdir -p app/src/dev
          echo '${{ secrets.GOOGLE_SERVICES_JSON_DEV }}' > app/src/dev/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-home-cache-cleanup: true
          cache-read-only: ${{ github.ref != 'refs/heads/main' }}

      - name: Build Dev APKs
        run: ./gradlew assembleDevDebug assembleDevRelease --parallel

      - name: Upload Dev APKs
        uses: actions/upload-artifact@v4
        with:
          name: dev-apks-${{ github.run_number }}
          path: app/build/outputs/apk/dev/**/*.apk

  build-prod:
    name: Build Prod APK
    runs-on: ubuntu-latest
    needs: [detekt, lint, test]
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'release')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for prod
        run: |
          mkdir -p app/src/prod
          echo '${{ secrets.GOOGLE_SERVICES_JSON_PROD }}' > app/src/prod/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build Prod APK
        run: ./gradlew assembleProdDebug assembleProdRelease --parallel

      - name: Upload Prod APKs
        uses: actions/upload-artifact@v4
        with:
          name: prod-apks-${{ github.run_number }}
          path: app/build/outputs/apk/prod/**/*.apk

  deploy-firebase:
    name: Deploy to Firebase App Distribution
    runs-on: ubuntu-latest
    needs: [build-dev]
    if: github.ref == 'refs/heads/development' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create google-services.json for dev
        run: |
          mkdir -p app/src/dev
          echo '${{ secrets.GOOGLE_SERVICES_JSON_DEV }}' > app/src/dev/google-services.json

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Build Dev Release APK
        run: ./gradlew assembleDevRelease

      - name: Deploy to Firebase App Distribution
        run: |
          ./gradlew appDistributionUploadDevRelease \
            --app=1:1044804823434:android:e46295f9c1b9b572078073 \
            --groups="testers" \
            --release-notes="ðŸš€ Dev build from CI - Branch: ${{ github.ref_name }}, Commit: ${{ github.sha }}"
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [detekt, lint, test, build-dev]
    if: always()

    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.detekt.result }}" != "success" || 
                "${{ needs.lint.result }}" != "success" || 
                "${{ needs.test.result }}" != "success" || 
                "${{ needs.build-dev.result }}" != "success" ]]; then
            echo "One or more jobs failed"
            exit 1
          else
            echo "All CI jobs passed successfully!"
          fi